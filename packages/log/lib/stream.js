// Generated by CoffeeScript 2.6.1
// # `nikita.log.stream`

// Write log to custom destinations in a user provided format.

// ## Schema definitions
var definitions, fs, handler, path;

definitions = {
  config: {
    type: 'object',
    properties: {
      'end': {
        type: 'boolean',
        default: true,
        description: `Close the writable stream with the session is finished or stoped on
error.`
      },
      'serializer': {
        type: 'object',
        description: `An object of key value pairs where keys are the event types and the
value is a function which must be implemented to serialize the
information.`,
        // patternProperties:
        //   '.*': typeof: 'function'
        properties: {
          'diff': {
            typeof: 'function'
          },
          'nikita:action:start': {
            typeof: 'function'
          },
          'nikita:action:end': {
            typeof: 'function'
          },
          'nikita:resolved': {
            typeof: 'function'
          },
          'nikita:rejected': {
            typeof: 'function'
          },
          'stdin': {
            typeof: 'function'
          },
          'stdout_stream': {
            typeof: 'function'
          },
          'text': {
            typeof: 'function'
          }
        },
        additionalProperties: false
      },
      'stream': {
        instanceof: 'Object', // WritableStream
        description: `The writable stream where to print the logs.`
      }
    },
    required: ['serializer', 'stream']
  }
};

// ## Handler
handler = function({
    config,
    metadata: {position, uuid},
    tools: {events}
  }) {
  var close;
  // Events
  close = function() {
    if (config.end) {
      return config.stream.close();
    }
  };
  events.on('diff', function(log) {
    var data;
    if (!config.serializer.diff) {
      return;
    }
    data = config.serializer.diff(log);
    if (data != null) {
      return config.stream.write(data);
    }
  });
  events.on('nikita:action:start', async function() {
    var data;
    if (!config.serializer['nikita:action:start']) {
      return;
    }
    data = (await config.serializer['nikita:action:start'].apply(null, arguments));
    if (data != null) {
      return config.stream.write(data);
    }
  });
  events.on('nikita:action:end', function() {
    var data;
    if (!config.serializer['nikita:action:end']) {
      return;
    }
    data = config.serializer['nikita:action:end'].apply(null, arguments);
    if (data != null) {
      return config.stream.write(data);
    }
  });
  events.on('nikita:resolved', function({action}) {
    var data;
    if (config.serializer['nikita:resolved']) {
      data = config.serializer['nikita:resolved'].apply(null, arguments);
      if (data != null) {
        config.stream.write(data);
      }
    }
    return close();
  });
  events.on('nikita:rejected', function({action}) {
    var data;
    if (config.serializer['nikita:rejected']) {
      data = config.serializer['nikita:rejected'].apply(null, arguments);
      if (data != null) {
        config.stream.write(data);
      }
    }
    return close();
  });
  events.on('text', function(log) {
    var data;
    if (!config.serializer.text) {
      return;
    }
    data = config.serializer.text(log);
    if (data != null) {
      return config.stream.write(data);
    }
  });
  events.on('stdin', function(log) {
    var data;
    if (!config.serializer.stdin) {
      return;
    }
    data = config.serializer.stdin(log);
    if (data != null) {
      return config.stream.write(data);
    }
  });
  events.on('stdout_stream', function(log) {
    var data;
    if (!config.serializer.stdout_stream) {
      return;
    }
    data = config.serializer.stdout_stream(log);
    if (data != null) {
      return config.stream.write(data);
    }
  });
  return null;
};

// ## Exports
module.exports = {
  ssh: false,
  handler: handler,
  metadata: {
    definitions: definitions
  }
};

// ## Dependencies
fs = require('fs');

path = require('path');
