// Generated by CoffeeScript 2.6.1
// # `nikita.fs.base.readFile`

// ## Example

// ```js
// const {data} = await nikita.fs.base.readFile({
//   target: `${scratch}/a_file`,
//   encoding: 'ascii'
// })
// console.info(data)
// ```

// ## Schema definitions
var definitions, handler;

definitions = {
  config: {
    type: 'object',
    properties: {
      'encoding': {
        type: 'string',
        enum: require('../../../utils/schema').encodings,
        description: `The encoding used to decode the buffer into a string. The encoding can
be any one of those accepted by Buffer. When not defined, this action
return a Buffer instance.`
      },
      'target': {
        oneOf: [
          {
            type: 'string'
          },
          {
            instanceof: 'Buffer'
          }
        ],
        description: `Source location of the file to read.`
      }
    },
    required: ['target']
  }
};

// ## Handler
handler = async function({config}) {
  var buffers, data;
  // Normalize options
  buffers = [];
  await this.fs.base.createReadStream({
    target: config.target,
    on_readable: function(rs) {
      var buffer, results;
      results = [];
      while (buffer = rs.read()) {
        results.push(buffers.push(buffer));
      }
      return results;
    }
  });
  data = Buffer.concat(buffers);
  if (config.encoding) {
    data = data.toString(config.encoding);
  }
  return {
    data: data
  };
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    argument_to_config: 'target',
    log: false,
    raw_output: true,
    definitions: definitions
  }
};
