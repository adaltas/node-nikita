// Generated by CoffeeScript 2.6.1
module.exports = {
  // compare: (array1, array2) ->
  //   # compare lengths - can save a lot of time
  //   if array1.length isnt array2.length
  //     return false
  //   for i in [0...array1.length]
  //     # Check if we have nested arrays
  //     if Array.isArray(array1[i]) and Array.isArray(array2[i])
  //       # recurse into the nested arrays
  //       if !array1[i].equals array2[i]
  //         return false
  //     else if array1[i] != array2[i]
  //         # Warning - two different object instances will never be equal: {x:20} != {x:20}
  //         return false
  //   return true
  clone: function(arr) {
    var el, i, k, len, ret;
    ret = [arr.length];
    for (i = k = 0, len = arr.length; k < len; i = ++k) {
      el = arr[i];
      ret[i] = el;
    }
    return ret;
  },
  intersect: function(array) {
    var argument, i, item, j, k, l, len, len1, result;
    if (array === null) {
      return [];
    }
    result = [];
    for (i = k = 0, len = array.length; k < len; i = ++k) {
      item = array[i];
      if (result.indexOf(item) !== -1) {
        continue;
      }
      for (j = l = 0, len1 = arguments.length; l < len1; j = ++l) {
        argument = arguments[j];
        if (argument.indexOf(item) === -1) {
          break;
        }
      }
      if (j === arguments.length) {
        result.push(item);
      }
    }
    return result;
  },
  flatten: function(arr, depth = -1) {
    var i, k, ref, ret;
    ret = [];
    for (i = k = 0, ref = arr.length; (0 <= ref ? k < ref : k > ref); i = 0 <= ref ? ++k : --k) {
      if (Array.isArray(arr[i])) {
        if (depth === 0) {
          ret.push(...arr[i]);
        } else {
          ret.push(...module.exports.flatten(arr[i], depth - 1));
        }
      } else {
        ret.push(arr[i]);
      }
    }
    return ret;
  },
  multiply: function(...args) {
    var action, arg, arg_element, i, j, k, l, len, len1, newresults, results;
// Convert every argument to an array
    for (i = k = 0, len = args.length; k < len; i = ++k) {
      arg = args[i];
      if (!Array.isArray(arg)) {
        args[i] = [arg];
      }
    }
    // Multiply arguments
    results = [];
    for (i = l = 0, len1 = args.length; l < len1; i = ++l) {
      arg = args[i];
      newresults = (function() {
        var len2, m, results1;
        results1 = [];
        for (j = m = 0, len2 = arg.length; m < len2; j = ++m) {
          arg_element = arg[j];
          // Every element of the first argument will initialize results
          if (i === 0) {
            results1.push([[arg_element]]);
          } else {
            results1.push((function() {
              var len3, n, results2;
              results2 = [];
              for (i = n = 0, len3 = results.length; n < len3; i = ++n) {
                action = results[i];
                results2.push([...action, arg_element]);
              }
              return results2;
            })());
          }
        }
        return results1;
      })();
      results = module.exports.flatten(newresults, 0);
    }
    return results;
  },
  merge: function(...arrays) {
    var array, el, k, l, len, len1, r;
    r = [];
    for (k = 0, len = arrays.length; k < len; k++) {
      array = arrays[k];
      for (l = 0, len1 = array.length; l < len1; l++) {
        el = array[l];
        r.push(el);
      }
    }
    return r;
  },
  shuffle: function(a) {
    var i, j, k, ref;
    if (a.length <= 1) {
      return a;
    }
    for (i = k = ref = a.length - 1; (ref <= 0 ? k <= 0 : k >= 0); i = ref <= 0 ? ++k : --k) {
      j = Math.floor(Math.random() * (i + 1));
      [a[i], a[j]] = [a[j], a[i]];
    }
    return a;
  },
  unique: function(array) {
    var el, k, len, o;
    o = {};
    for (k = 0, len = array.length; k < len; k++) {
      el = array[k];
      o[el] = true;
    }
    return Object.keys(o);
  }
};
