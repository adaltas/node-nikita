// Generated by CoffeeScript 2.6.1
var utils, validate, walk;

utils = require('../../utils');

walk = async function(action, walker) {
  var precious, results;
  precious = (await walker(action));
  results = [];
  if (precious !== void 0) {
    results.push(precious);
  }
  if (action.parent) {
    results.push(...((await walk(action.parent, walker))));
  }
  return results;
};

validate = function(action, args) {
  var walker;
  if (args.length === 1) {
    [walker] = args;
  } else if (args.length === 2) {
    [action, walker] = args;
  } else {
    if (!action) {
      throw utils.error('TOOLS_WALK_INVALID_ARGUMENT', ['action signature is expected to be', '`walker` or `action, walker`', `got ${JSON.stringify(args)}`]);
    }
  }
  if (!action) {
    throw utils.error('TOOLS_WALK_ACTION_WALKER_REQUIRED', ['argument `action` is missing and must be a valid action']);
  }
  if (!walker) {
    throw utils.error('TOOLS_WALK_WALKER_REQUIRED', ['argument `walker` is missing and must be a function']);
  }
  if (typeof walker !== 'function') {
    throw utils.error('TOOLS_WALK_WALKER_INVALID', ['argument `walker` is missing and must be a function']);
  }
  return [action, walker];
};

module.exports = {
  name: '@nikitajs/core/lib/plugins/tools/walk',
  hooks: {
    'nikita:normalize': function(action) {
      if (action.tools == null) {
        action.tools = {};
      }
      action.tools.walk = async function() {
        var walker;
        [action, walker] = validate(action, arguments);
        return (await walk(action, walker));
      };
      // Register action
      return action.registry.register(['tools', 'walk'], {
        metadata: {
          raw: true
        },
        handler: async function(action) {
          var walker;
          [action, walker] = validate(action, action.args);
          return (await walk(action.parent, walker));
        }
      });
    }
  }
};
