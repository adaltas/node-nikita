// Generated by CoffeeScript 2.7.0
// # `nikita.lxc.wait.ready`

// Wait for a container to be ready to use.

// ## Example

// ```js
// const {$status} = await nikita.lxc.wait.ready({
//   container: "myubuntu"
// })
// console.info(`Container is ready: ${$status}`)
// ```

// ## Schema definitions
var definitions, handler;

definitions = {
  config: {
    type: 'object',
    properties: {
      'container': {
        $ref: 'module://@nikitajs/lxd/lib/init#/definitions/config/properties/container'
      },
      'nat': {
        type: 'boolean',
        default: false,
        description: `If true, will wait for internet to be connected`
      }
    },
    required: ['container']
  }
};

// ## Handler
handler = async function({config}) {
  var $status;
  ({$status} = (await this.call({
    $retry: 100,
    $sleep: 1000
  }, async function() {
    var processes;
    ({
      config: {processes}
    } = (await this.lxc.state({
      $header: "Checking if instance is ready",
      container: config.container
    })));
    // Processes are at -1 when they aren't ready
    if (processes < 0) {
      throw Error("Reschedule: Instance not booted");
    }
    // Sometimes processes alone aren't enough, so we test if we can get the container
    ({$status} = (await this.lxc.exec({
      $header: "Trying to execute a command",
      container: config.container,
      command: `if ( command -v systemctl || command -v rc-service ); then
  exit 0
else 
  exit 42
fi`,
      code: [0, 42]
    })));
    if ($status === false) {
      throw Error("Reschedule: Instance not ready to execute commands");
    }
    // Checking if internet is working and ready for us to use
    if (config.nat === true) {
      ({$status} = (await this.lxc.exec({
        $header: "Trying to connect to internet",
        container: config.container,
        command: `ping -c 2 8.8.8.8 || exit 42`,
        code: [0, 42]
      })));
      if ($status === false) {
        throw Error("Reschedule: Internet not ready");
      }
    }
  })));
  return {
    $status: $status
  };
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    argument_to_config: 'container',
    definitions: definitions
  }
};
