// Generated by CoffeeScript 2.7.0
// # `nikita.db.query`

// Make requests to a database.

// ## Hooks
var definitions, handler, on_action, utils;

on_action = function({config}) {
  var ref;
  return config.engine = (ref = config.engine) != null ? ref.toLowerCase() : void 0;
};

// ## Schema definitions
definitions = {
  config: {
    type: 'object',
    properties: {
      'admin_username': {
        type: 'string',
        description: `The login of the database administrator. It should have the necessary
permissions such as to  create accounts when using the
\`nikita.db.user\` action.`
      },
      'admin_password': {
        type: 'string',
        description: `The password of the database administrator.`
      },
      'database': {
        type: ['null', 'string'],
        description: `The default database name, provide the value \`null\` if you want to
ensore no default database is set.`
      },
      'grep': {
        oneOf: [
          {
            type: 'string'
          },
          {
            instanceof: 'RegExp'
          }
        ],
        description: `Ensure the query output match a string or a regular expression`
      },
      'engine': {
        type: 'string',
        enum: ['mariadb', 'mysql', 'postgresql'],
        description: `The engine type, can be MariaDB, MySQL or PostgreSQL. Values
are converted to lower cases.`
      },
      'host': {
        type: 'string',
        description: `The hostname of the database.`
      },
      'port': {
        type: 'integer',
        description: `Port to the associated database.`
      },
      'silent': {
        type: 'boolean',
        default: true
      },
      'trim': {
        type: 'boolean',
        default: false
      }
    },
    required: ['admin_password', 'command', 'engine', 'host', 'admin_username']
  }
};

// ## Handler
handler = async function({config}) {
  var $status, stdout;
  ({$status, stdout} = (await this.execute({
    command: utils.db.command(config),
    trim: config.trim
  })));
  if (config.grep && typeof config.grep === 'string') {
    return {
      stdout: stdout,
      $status: stdout.split('\n').some(function(line) {
        return line === config.grep;
      })
    };
  }
  if (config.grep && utils.regexp.is(config.grep)) {
    return {
      stdout: stdout,
      $status: stdout.split('\n').some(function(line) {
        return config.grep.test(line);
      })
    };
  }
  return {
    status: $status,
    stdout: stdout
  };
};

// ## Exports
module.exports = {
  handler: handler,
  hooks: {
    on_action: on_action
  },
  metadata: {
    global: 'db',
    definitions: definitions
  }
};

// ## Dependencies
utils = require('./utils');
