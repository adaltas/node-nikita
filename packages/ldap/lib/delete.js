// Generated by CoffeeScript 2.6.1
// # `nikita.ldap.delete`

// Insert or modify an entry inside an OpenLDAP server.   

// ## Example

// ```js
// const {$status} = await nikita.ldap.delete({
//   uri: 'ldap://openldap.server/',
//   binddn: 'cn=admin,cn=config',
//   passwd: 'password',
//   dn: 'cn=group1,ou=groups,dc=company,dc=com'
// })
// console.log(`Entry deleted: ${$status}`)
// ```

// ## Schema definitions
var definitions, handler;

definitions = {
  config: {
    type: 'object',
    properties: {
      'dn': {
        type: 'array',
        items: {
          type: 'string'
        },
        description: `One or multiple DN to remove.`
      },
      'name': {
        type: 'string',
        description: `Distinguish name storing the "olcAccess" property, using the database
address (eg: "olcDatabase={2}bdb,cn=config").`
      },
      // General LDAP connection information
      'binddn': {
        type: 'string',
        description: `Distinguished Name to bind to the LDAP directory.`
      },
      'passwd': {
        type: 'string',
        description: `Password for simple authentication.`
      },
      'uri': {
        type: 'string',
        description: `LDAP Uniform Resource Identifier(s), "ldapi:///" if true, default to
false in which case it will use your openldap client environment
configuration.`
      }
    },
    required: ['dn']
  }
};

// ## Handler
handler = async function({config}) {
  var binddn, dn, passwd, uri;
  // Auth related config
  binddn = config.binddn ? `-D ${config.binddn}` : '';
  passwd = config.passwd ? `-w ${config.passwd}` : '';
  if (config.uri === true) {
    config.uri = 'ldapi:///';
  }
  uri = config.uri ? `-H ${config.uri}` : ''; // URI is obtained from local openldap conf unless provided
  if (!Array.isArray(config.dn)) {
    // Add related config
    config.dn = [config.dn];
  }
  dn = config.dn.map(function(dn) {
    return `'${dn}'`;
  }).join(' ');
  // ldapdelete -D cn=Manager,dc=ryba -w test -H ldaps://master3.ryba:636 'cn=nikita,ou=users,dc=ryba'
  return (await this.execute({
    // Check that the entry exists
    $if_execute: `ldapsearch ${binddn} ${passwd} ${uri} -b ${dn} -s base`,
    command: `ldapdelete ${binddn} ${passwd} ${uri} ${dn}`
  }));
};

// code_skipped: 68
// modified = stderr.match(/Already exists/g)?.length isnt stdout.match(/adding new entry/g).length
// added = modified # For now, we dont modify
// callback err, modified, added

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    global: 'ldap',
    definitions: definitions
  }
};
