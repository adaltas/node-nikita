// Generated by CoffeeScript 2.6.1
// # `nikita.tools.cron.add`

// Register a job on crontab.

// ## Example

// ```js
// const {$status} = await nikita.cron.add({
//   command: 'kinit service/my.fqdn@MY.REALM -kt /etc/security/service.keytab',
//   when: '0 */9 * * *',
//   user: 'service'
// })
// console.info(`Cron entry created or modified: ${$status}`)
// ```

// ## Schema definitions
var definitions, handler, util, utils;

definitions = {
  config: {
    type: 'object',
    properties: {
      'command': {
        type: 'string',
        minLength: 1,
        description: `The shell command of the job.`
      },
      'exec': {
        type: 'boolean',
        description: `If true, then command will be executed just after if added to crontab.`
      },
      'match': {
        oneOf: [
          {
            type: 'string'
          },
          {
            instanceof: 'RegExp'
          }
        ],
        description: `The cron entry to match, a string will be converted to a regexp and an
undefined or null value will match the exact command.`
      },
      'user': {
        type: 'string',
        description: `The user of the crontab. The SSH user by default.`
      },
      'when': {
        type: 'string',
        pattern: '^(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\d+(ns|us|Âµs|ms|s|m|h))+)|((((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7})$',
        // noBooleanCoercion: true
        // noNumberCoercion: true
        description: `Cron-styled time string. Defines the frequency of the cron job.`
      }
    },
    required: ['command', 'when']
  }
};

// ## Handler
handler = async function({
    config,
    tools: {log}
  }) {
  var added, crontab, i, job, jobs, modified, new_job, regex, stdout;
  if (config.user != null) {
    log({
      message: `Using user ${config.user}`,
      level: 'DEBUG'
    });
    crontab = `crontab -u ${config.user}`;
  } else {
    log({
      message: "Using default user",
      level: 'DEBUG'
    });
    crontab = "crontab";
  }
  jobs = [];
  ({stdout} = (await this.execute({
    command: `${crontab} -l`,
    code: [0, 1]
  })));
  new_job = `${config.when} ${config.command}`;
  // remove useless last element
  regex = (function() {
    if (!config.match) {
      return new RegExp(`.* ${utils.regexp.escape(config.command)}`);
    } else if (typeof config.match === 'string') {
      return new RegExp(config.match);
    } else if (util.isRegExp(config.match)) {
      return config.match;
    } else {
      throw Error("Invalid option 'match'");
    }
  })();
  added = true;
  jobs = (function() {
    var j, len, ref, results;
    ref = utils.string.lines(stdout.trim());
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      job = ref[i];
      if (regex.test(job)) {
        added = false;
        if (job === new_job) { // Found job, stop here
          break;
        }
        log({
          message: "Entry has changed",
          level: 'WARN'
        });
        utils.diff(job, new_job, config);
        job = new_job;
        modified = true;
      }
      if (!job) {
        continue;
      }
      results.push(job);
    }
    return results;
  })();
  if (added) {
    jobs.push(new_job);
    log({
      message: "Job not found in crontab, adding",
      level: 'WARN'
    });
  }
  if (!(added || modified)) {
    jobs = null;
  }
  if (!jobs) {
    return {
      $status: false
    };
  }
  if (config.exec) {
    await this.execute({
      command: config.user != null ? `su -l ${config.user} -c '${config.command}'` : config.command
    });
  }
  return (await this.execute({
    command: `${crontab} - <<EOF
${jobs ? jobs.join('\n', '\nEOF') : 'EOF'}`
  }));
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    definitions: definitions
  }
};

// ## Dependencies
util = require('util');

utils = require('../utils');
