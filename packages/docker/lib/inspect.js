// Generated by CoffeeScript 2.6.1
// # `nikita.docker.inspect`

// Send signal to containers using SIGKILL or a specified signal.
// Note if container is not running , SIGKILL is not executed and
// return status is UNMODIFIED. If container does not exist nor is running
// SIGNAL is not sent.

// ## Output

// * `err`   
//   Error object if any.
// * `$status`   
//   True if container was killed.

// ## Example

// Inspect a single container.

// ```js
// const {info} = await nikita.docker.inspect({
//   name: 'my_container'
// })
// console.info(`Container id is ${info.Id}`)
// ```

// Inspect multiple containers.

// ```js
// const {info} = await nikita.docker.inspect({
//   name: 'my_container'
// })
// info.map( (container) =>
//   console.info(`Container id is ${container.Id}`)
// )
// ```

// ## Schema definitions
var definitions, handler;

definitions = {
  config: {
    type: 'object',
    properties: {
      'container': {
        type: ['array', 'string'],
        items: {
          type: 'string'
        },
        description: `Name/ID of the container (array of containers not yet implemented).`
      },
      'docker': {
        $ref: 'module://@nikitajs/docker/lib/tools/execute#/definitions/docker'
      }
    },
    required: ['container']
  }
};

// ## Handler
handler = async function({config}) {
  var info, isCointainerArray;
  isCointainerArray = Array.isArray(config.container);
  ({
    data: info
  } = (await this.docker.tools.execute({
    command: ['inspect', ...(isCointainerArray ? config.container : [config.container])].join(' '),
    format: 'json'
  })));
  return {
    info: isCointainerArray ? info : info[0]
  };
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    global: 'docker',
    definitions: definitions
  }
};
