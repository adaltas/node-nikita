// Generated by CoffeeScript 2.6.1
// # `nikita.docker.rmi`

// Remove images. All container using image should be stopped to delete it unless
// force options is set.

// ## Output

// * `err`   
//   Error object if any.
// * `status`   
//   True if image was removed.

// ## Schema definitions
var definitions, handler;

definitions = {
  config: {
    type: 'object',
    properties: {
      'cwd': {
        type: 'string',
        description: `Change the build working directory.`
      },
      'docker': {
        $ref: 'module://@nikitajs/docker/lib/tools/execute#/definitions/docker'
      },
      'image': {
        type: 'string',
        description: `Name of the Docker image present in the registry.`
      },
      'no_prune': {
        type: 'boolean',
        description: `Do not delete untagged parents.`
      },
      'tag': {
        type: 'string',
        description: `Tag of the Docker image, default to latest.`
      }
    },
    required: ['image']
  }
};

// ## Handler
handler = async function({config}) {
  await this.docker.tools.execute({
    command: ['images', `| grep '${config.image} '`, config.tag != null ? `| grep ' ${config.tag} '` : void 0].join(' '),
    code_skipped: [1]
  });
  return (await this.docker.tools.execute({
    $if: function({parent}) {
      return parent.parent.tools.status(-1);
    },
    command: [
      'rmi',
      ['force',
      'no_prune'].filter(function(opt) {
        return config[opt] != null;
      }).map(function(opt) {
        return ` --${opt.replace('_',
      '-')}`;
      }),
      ` ${config.image}`,
      config.tag != null ? `:${config.tag}` : void 0
    ].join('')
  }));
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    argument_to_config: 'image',
    global: 'docker',
    definitions: definitions
  }
};
