// Generated by CoffeeScript 2.6.1
// # `nikita.docker.tools.status`

// Return true if container is running. This function is not native to docker. 

// ## Output

// * `err`   
//   Error object if any.
// * `$status`   
//   True if container is running.
// * `stdout`   
//   Stdout value(s) unless `stdout` option is provided.
// * `stderr`   
//   Stderr value(s) unless `stderr` option is provided.

// ## Example

// ```js
// const {$status} = await nikita.docker.tools.status({
//   container: 'container1'
// })
// console.info(`Container is running: ${$status}`)
// ```

// ## Schema definitions
var definitions, handler;

definitions = {
  config: {
    type: 'object',
    properties: {
      'container': {
        type: 'array',
        items: {
          type: 'string'
        },
        description: `Name or Id of the container.`
      },
      'docker': {
        $ref: 'module://@nikitajs/docker/lib/tools/execute#/definitions/docker'
      }
    },
    required: ['container']
  }
};

// ## Handler
handler = async function({
    config,
    tools: {find, log}
  }) {
  var k, ref, v;
  // Global config
  config.docker = (await find(function({
      config: {docker}
    }) {
    return docker;
  }));
  ref = config.docker;
  for (k in ref) {
    v = ref[k];
    if (config[k] == null) {
      config[k] = v;
    }
  }
  // Construct exec command
  return (await this.docker.tools.execute({
    command: `ps | egrep ' ${config.container}$'`,
    code_skipped: 1
  }));
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    definitions: definitions
  }
};
