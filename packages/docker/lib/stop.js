// Generated by CoffeeScript 2.6.1
// # `nikita.docker.stop`

// Stop a started container.

// ## Output

// * `err`   
//   Error object if any.
// * `$status`   
//   True unless container was already stopped.

// ## Example

// ```js
// const {$status} = await nikita.docker.stop({
//   container: 'toto'
// })
// console.info(`Container was stopped: ${$status}`)
// ```

// ## Schema definitions
var definitions, handler;

definitions = {
  config: {
    type: 'object',
    properties: {
      'container': {
        type: 'string',
        description: `Name/ID of the container.`
      },
      'docker': {
        $ref: 'module://@nikitajs/docker/lib/tools/execute#/definitions/docker'
      },
      'timeout': {
        type: 'integer',
        description: `Seconds to wait for stop before killing the container (Docker default
is 10).`
      }
    },
    required: ['container']
  }
};

// ## Handler
handler = async function({
    config,
    tools: {log}
  }) {
  var $status;
  // rm is false by default only if config.service is true
  ({$status} = (await this.docker.tools.status(config, {
    $shy: true
  })));
  if ($status) {
    log({
      message: `Stopping container ${config.container}`,
      level: 'INFO',
      module: 'nikita/lib/docker/stop'
    });
  } else {
    log({
      message: `Container already stopped ${config.container} (Skipping)`,
      level: 'INFO',
      module: 'nikita/lib/docker/stop'
    });
  }
  return (await this.docker.tools.execute({
    $if: $status,
    command: ['stop', config.timeout != null ? `-t ${config.timeout}` : void 0, `${config.container}`].join(' ')
  }));
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    global: 'docker',
    definitions: definitions
  }
};
