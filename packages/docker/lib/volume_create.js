// Generated by CoffeeScript 2.6.1
// # `nikita.docker.volume_create`

// Create a volume.

// ## Output

// * `err`   
//   Error object if any.   
// * `$status`   
//   True is volume was created.

// ## Example

// ```js
// const {$status} = await nikita.docker.volume_create({
//   name: 'my_volume'
// })
// console.info(`Volume was created: ${$status}`)
// ```

// ## Schema definitions
var definitions, handler;

definitions = {
  config: {
    type: 'object',
    properties: {
      'docker': {
        $ref: 'module://@nikitajs/docker/lib/tools/execute#/definitions/docker'
      },
      'driver': {
        type: 'string',
        description: `Specify volume driver name.`
      },
      'label': {
        type: 'array',
        items: {
          type: 'string'
        },
        description: `Set metadata for a volume.`
      },
      'name': {
        type: 'string',
        description: `Specify volume name.`
      },
      'opt': {
        type: 'array',
        items: {
          type: 'string'
        },
        description: `Set driver specific options.`
      }
    }
  }
};

// ## Handler
handler = async function({config}) {
  var $status;
  if (typeof config.label === 'string') {
    // Normalize config
    config.label = [config.label];
  }
  if (typeof config.opt === 'string') {
    config.opt = [config.opt];
  }
  ({$status} = (await this.docker.tools.execute({
    $if: config.name,
    $shy: true,
    command: `volume inspect ${config.name}`,
    code: 1,
    code_skipped: 0
  })));
  return (await this.docker.tools.execute({
    $if: !config.name || $status,
    command: ["volume create", config.driver ? `--driver ${config.driver}` : void 0, config.label ? `--label ${config.label.join(',')}` : void 0, config.name ? `--name ${config.name}` : void 0, config.opt ? `--opt ${config.opt.join(',')}` : void 0].join(' ')
  }));
};

// ## Exports
module.exports = {
  handler: handler,
  metadata: {
    global: 'docker',
    definitions: definitions
  }
};
