{
    "componentChunkName": "component---src-templates-action-js",
    "path": "/current/actions/core/ssh/root/",
    "result": {"data":{"page":{"slug":"/current/actions/core/ssh/root/","edit_url":"https://github.com/adaltas/node-nikita/edit/master/packages/core/src/actions/ssh/root.coffee.md","package":{"id":"daec4302-7771-5b7c-ad7c-702e3eb49237","keywords":["nikita","build","cli","deployment","automation","IaS","fs","install","ssh","system","task"]},"name":"ssh.root","version":{"alias":"current"},"parent":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Prepare the system to receive password-less root login with SSL/TLS keys.\"), mdx(\"p\", null, \"Prior executing this handler, a user with appropriate sudo permissions must be\\ncreated. The script will use those credentials\\nto loggin and will try to become root with the \\\"sudo\\\" command. Use the \\\"command\\\"\\nproperty if you must use a different command (such as \\\"sudo su -\\\").\"), mdx(\"p\", null, \"Additionnally, it disables SELINUX which require a restart. The restart is\\nhandled by Masson and the installation procedure will continue as soon as an\\nSSH connection is again available.\"), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Example\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"const\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"$status\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"await\"), \" nikita\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"ssh\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"root\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string-property property\"\n  }, \"\\\"username\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"vagrant\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string-property property\"\n  }, \"\\\"private_key_path\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"/home/monsieur/.vagrant.d/insecure_private_key\\\"\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string-property property\"\n  }, \"\\\"public_key_path\\\"\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"\\\"~/.ssh/id_rsa.pub\\\"\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\nconsole\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"info\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token template-string\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"Public key was updoaded for root user: \"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }, \"${\"), \"$status\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token interpolation-punctuation punctuation\"\n  }, \"}\")), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token template-punctuation string\"\n  }, \"`\")), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\")))), mdx(\"h2\", {\n    \"id\": \"schema-definitions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#schema-definitions\",\n    \"aria-label\": \"schema definitions permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Schema definitions\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"definitions =\\n  config:\\n    type: 'object'\\n    properties:\\n      'command':\\n        oneOf: [{type: 'string'}, {typeof: 'function'}]\\n      'host':\\n        type: 'string'\\n        # oneOf: [{format: 'ipv4'}, {format: 'hostname'}]\\n        default: 'root'\\n        description: '''\\n        Command used to become the root user on the remote server, for example\\n        `su -`.\\n        '''\\n      'password':\\n        type: 'string'\\n        description: '''\\n        Password of the user with sudo permissions to establish the SSH\\n        connection  if no private key is provided.\\n        '''\\n      'port':\\n        type: 'integer'\\n        default: 22\\n        description: '''\\n        '''\\n      'private_key':\\n        type: 'string'\\n        description: '''\\n        Private key of the user with sudo permissions to establish the SSH\\n        connection if `password` is not provided.\\n        '''\\n      'private_key_path':\\n        type: 'string'\\n        description: '''\\n        Local file location of the private key of the user with sudo\\n        permissions and used to establish the SSH connection if `password` and\\n        `private_key` are not provided.\\n        '''\\n      'public_key':\\n        oneOf: [{type: 'string'}, {instanceof: 'Buffer'}]\\n        description: '''\\n        Public key added to \\\"authorized_keys\\\" to enable the root user.\\n        '''\\n      'public_key_path':\\n        type: 'string'\\n        description: '''\\n        Local path to the public key added to \\\"authorized_keys\\\" to enable the\\n        root  user.\\n        '''\\n      'selinux':\\n        oneOf: [\\n          {type: 'string', enum: ['disabled', 'enforcing', 'permissive']},\\n          {type: 'boolean'}\\n        ]\\n        default: 'permissive'\\n        description: '''\\n        Username of the user with sudo permissions to establish the SSH\\n        connection.\\n        '''\\n      'username':\\n        type: 'string'\\n        description: '''\\n        Username of the user with sudo permissions to establish the SSH\\n        connection.\\n        '''\"))), mdx(\"h2\", {\n    \"id\": \"handler\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#handler\",\n    \"aria-label\": \"handler permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Handler\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"handler = ({metadata, config, tools: {log}}) ->\\n  config.host ?= config.ip\\n  # config.command ?= 'su -'\\n  config.username ?= null\\n  config.password ?= null\\n  config.selinux ?= false\\n  config.selinux = 'permissive' if config.selinux is true\\n  # Validation\\n  throw Error \\\"Invalid option \\\\\\\"selinux\\\\\\\": #{config.selinux}\\\" if config.selinux and config.selinux not in ['enforcing', 'permissive', 'disabled']\\n  rebooting = false\\n  # Read public key if option is a path\\n  if config.public_key_path and not config.public_key\\n    location = await utils.tilde.normalize config.public_key_path\\n    try\\n      {data: config.public_key} = await fs.readFile location, 'ascii'\\n    catch err\\n      throw Error \\\"Private key doesnt exists: #{JSON.stringify location}\\\" if err.code is 'ENOENT'\\n      throw err\\n  # Read private key if option is a path\\n  if config.private_key_path and not config.private_key\\n    log message: \\\"Read Private Key: #{JSON.stringify config.private_key_path}\\\", level: 'DEBUG'\\n    location = await utils.tilde.normalize config.private_key_path\\n    try\\n      {data: config.private_key} = await fs.readFile location, 'ascii'\\n    catch err\\n      throw Error \\\"Private key doesnt exists: #{JSON.stringify location}\\\" if err.code is 'ENOENT'\\n      throw err\\n  await @call ->\\n    log message: \\\"Connecting\\\", level: 'DEBUG'\\n    conn = unless metadata.dry\\n    then await connect config\\n    else null\\n    log message: \\\"Connected\\\", level: 'INFO'\\n    command = []\\n    command.push \\\"\\\"\\\"\\n    sed -i.back 's/.*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config;\\n    \\\"\\\"\\\"\\n    command.push \\\"\\\"\\\"\\n    mkdir -p /root/.ssh; chmod 700 /root/.ssh;\\n    echo '#{config.public_key}' >> /root/.ssh/authorized_keys;\\n    \\\"\\\"\\\" if config.public_key\\n    command.push \\\"\\\"\\\"\\n    sed -i.back 's/.*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config;\\n    selinux=\\\"#{config.selinux or ''}\\\";\\n    if [ -n \\\"$selinux\\\" ] && [ -f /etc/selinux/config ] && grep ^SELINUX=\\\"$selinux\\\" /etc/selinux/config;\\n    then\\n      sed -i.back \\\"s/^SELINUX=enforcing/SELINUX=$selinux/\\\" /etc/selinux/config;\\n      ( reboot )&\\n      exit 2;\\n    fi;\\n    \\\"\\\"\\\"\\n    command = command.join '\\\\n'\\n    if config.username isnt 'root'\\n      command = command.replace /\\\\n/g, ' '\\n      if typeof config.command is 'function'\\n        command = config.command command\\n      else if typeof config.command is 'string'\\n        command = \\\"#{config.command} #{command}\\\"\\n      else\\n        config.command = 'sudo '\\n        config.command += \\\"-u #{config.user} \\\" if config.user\\n        config.command = \\\"echo -e \\\\\\\"#{config.password}\\\\\\\\n\\\\\\\" | #{config.command} -S \\\" if config.password\\n        config.command += \\\"-- sh -c \\\\\\\"#{command}\\\\\\\"\\\"\\n        command = config.command\\n    log message: \\\"Enable Root Access\\\", level: 'DEBUG'\\n    log message: command, type: 'stdin'\\n    unless metadata.dry\\n      child = exec\\n        ssh: conn\\n        command: command\\n      , (err) =>\\n        if err?.code is 2\\n          log message: \\\"Root Access Enabled\\\", level: 'WARN'\\n          err = null\\n          rebooting = true\\n        else throw err\\n      child.stdout.on 'data', (data) =>\\n        log message: data, type: 'stdout'\\n      child.stdout.on 'end', (data) =>\\n        log message: null, type: 'stdout'\\n      child.stderr.on 'data', (data) =>\\n        log message: data, type: 'stderr'\\n      child.stderr.on 'end', (data) =>\\n        log message: null, type: 'stderr'\\n  await @call $if: rebooting, $retry: true, $sleep: 3000, ->\\n    conn = await connect config\\n    conn.end()\"))), mdx(\"h2\", {\n    \"id\": \"exports\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#exports\",\n    \"aria-label\": \"exports permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Exports\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"module.exports =\\n  handler: handler\\n  metadata:\\n    definitions: definitions\"))), mdx(\"h2\", {\n    \"id\": \"dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#dependencies\",\n    \"aria-label\": \"dependencies permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dependencies\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"fs = require('fs').promises\\nconnect = require 'ssh2-connect'\\nexec = require 'ssh2-exec'\\nutils = require '../../utils'\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#nikitasshroot","title":"nikita.ssh.root","items":[{"url":"#example","title":"Example"},{"url":"#schema-definitions","title":"Schema definitions"},{"url":"#handler","title":"Handler"},{"url":"#exports","title":"Exports"},{"url":"#dependencies","title":"Dependencies"}]}]},"excerpt":"nikita.ssh.root Prepare the system to receive password-less root login with SSL/TLS keys. Prior executing this handler, a user with appropriate sudo permissions must be \ncreated. The script will use …"}}},"pageContext":{}},
    "staticQueryHashes": ["2288906906","393869461"]}