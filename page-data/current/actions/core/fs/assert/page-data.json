{
    "componentChunkName": "component---src-templates-action-js",
    "path": "/current/actions/core/fs/assert/",
    "result": {"data":{"page":{"slug":"/current/actions/core/fs/assert/","edit_url":"https://github.com/adaltas/node-nikita/edit/master/packages/core/src/actions/fs/assert.coffee.md","package":{"id":"daec4302-7771-5b7c-ad7c-702e3eb49237","keywords":["nikita","build","cli","deployment","automation","IaS","fs","install","ssh","system","task"]},"name":"fs.assert","version":{"alias":"current"},"parent":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Assert a file exists or a provided text match the content of a text file.\"), mdx(\"h2\", {\n    \"id\": \"output\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#output\",\n    \"aria-label\": \"output permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Output\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"err\"), \" (Error)\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"Error if assertion failed.   \")), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Example\"), mdx(\"p\", null, \"Validate the content of a file:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"nikita\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"fs\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"assert\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"target\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'/tmp/a_file'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \" \\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"content\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'nikita is around'\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\")))), mdx(\"p\", null, \"Ensure a file does not exists:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"js\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-js\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"nikita\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"fs\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"assert\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"target\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token string\"\n  }, \"'/tmp/a_file'\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token literal-property property\"\n  }, \"not\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token boolean\"\n  }, \"true\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\")))), mdx(\"h2\", {\n    \"id\": \"hooks\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#hooks\",\n    \"aria-label\": \"hooks permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Hooks\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"on_action = ({config, metadata}) ->\\n  config.filter = [config.filter] if config.filter instanceof RegExp\"))), mdx(\"h2\", {\n    \"id\": \"schema-definitions\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#schema-definitions\",\n    \"aria-label\": \"schema definitions permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Schema definitions\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"definitions =\\n  config:\\n    type: 'object'\\n    properties:\\n      'content':\\n        oneOf: [{type: 'string'}, {instanceof: 'Buffer'}, {instanceof: 'RegExp'}]\\n        description: '''\\n        Text to validate.\\n        '''\\n      'encoding':\\n        type: 'string'\\n        default: 'utf8'\\n        description: '''\\n        Content encoding, see the Node.js supported Buffer encoding.\\n        '''\\n      'filetype':\\n        type: 'array'\\n        items:\\n          type: ['integer', 'string']\\n        description: '''\\n        Validate the file, could be any [file type\\n        constants](https://nodejs.org/api/fs.html#fs_file_type_constants) or\\n        one of 'ifreg', 'file', 'ifdir', 'directory', 'ifchr', 'chardevice',\\n        'iffblk', 'blockdevice', 'ififo', 'fifo', 'iflink', 'symlink',\\n        'ifsock',  'socket'.\\n        '''\\n      'filter':\\n        type: 'array'\\n        items:\\n          instanceof: 'RegExp'\\n        description: '''\\n        Text to filter in actual content before matching.\\n        '''\\n      'gid':\\n        type: ['integer', 'string']\\n        description: '''\\n        Group ID to assert.\\n        '''\\n      'md5':\\n        type: 'string'\\n        description: '''\\n        Validate signature.\\n        '''\\n      'mode':\\n        type: 'array'\\n        items:\\n          $ref: 'module://@nikitajs/core/src/actions/fs/base/chmod#/definitions/config/properties/mode'\\n        description: '''\\n        Validate file permissions.\\n        '''\\n      'not':\\n        $ref: 'module://@nikitajs/core/src/actions/assert#/definitions/config/properties/not'\\n      'sha1':\\n        type: 'string'\\n        description: '''\\n        Validate signature.\\n        '''\\n      'sha256':\\n        type: 'string'\\n        description: '''\\n        Validate signature.\\n        '''\\n      'target':\\n        type: 'string'\\n        description: '''\\n        Location of the file to assert.\\n        '''\\n      'trim':\\n        type: 'boolean'\\n        default: false\\n        description: '''\\n        Trim the actual and expected content before matching.\\n        '''\\n      'uid':\\n        type: ['integer', 'string']\\n        description: '''\\n        User ID to assert.\\n        '''\\n    required: ['target']\"))), mdx(\"h2\", {\n    \"id\": \"handler\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#handler\",\n    \"aria-label\": \"handler permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Handler\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"handler = ({config}) ->\\n  config.filetype = for filetype in config.filetype or []\\n    continue unless filetype\\n    if typeof filetype is 'string'\\n      switch filetype.toLowerCase()\\n        when 'ifreg', 'file' then fs.constants.S_IFREG\\n        when 'ifdir', 'directory' then fs.constants.S_IFDIR\\n        when 'ifchr', 'chardevice' then fs.constants.S_IFCHR\\n        when 'iffblk', 'blockdevice' then fs.constants.S_IFBLK\\n        when 'ififo', 'fifo' then fs.constants.S_IFIFO\\n        when 'iflink', 'symlink' then fs.constants.S_IFLNK\\n        when 'ifsock', 'socket' then fs.constants.S_IFSOCK\\n        else filetype\\n    else filetype\\n  if typeof config.content is 'string'\\n    config.content = config.content.trim() if config.trim\\n    config.content = Buffer.from config.content, config.encoding\\n  else if Buffer.isBuffer config.content\\n    config.content = utils.buffer.trim config.content, config.encoding if config.trim\\n  # Assert file exists\\n  unless config.content? or config.md5 or config.sha1 or config.sha256 or config.mode?.length\\n    {exists} = await @fs.base.exists config.target.toString()\\n    unless config.not\\n      unless exists\\n        err = errors.NIKITA_FS_ASSERT_FILE_MISSING config: config\\n    else\\n      if exists\\n        err = errors.NIKITA_FS_ASSERT_FILE_EXISTS config: config\\n    throw err if err\\n  # Assert file filetype\\n  if config.filetype?.length\\n    {stats} = await @fs.base.lstat config.target\\n    if fs.constants.S_IFREG in config.filetype and not utils.stats.isFile stats.mode\\n      throw errors.NIKITA_FS_ASSERT_FILETYPE_INVALID config: config, expect: 'File', stats: stats\\n    if fs.constants.S_IFDIR in config.filetype and not utils.stats.isDirectory stats.mode\\n      throw errors.NIKITA_FS_ASSERT_FILETYPE_INVALID config: config, expect: 'Directory', stats: stats\\n    if fs.constants.S_IFCHR in config.filetype and not utils.stats.isCharacterDevice stats.mode\\n      throw errors.NIKITA_FS_ASSERT_FILETYPE_INVALID config: config, expect: 'Character Device', stats: stats\\n    if fs.constants.S_IFBLK in config.filetype and not utils.stats.isBlockDevice stats.mode\\n      throw errors.NIKITA_FS_ASSERT_FILETYPE_INVALID config: config, expect: 'Block Device', stats: stats\\n    if fs.constants.S_IFIFO in config.filetype and not utils.stats.isFIFO stats.mode\\n      throw errors.NIKITA_FS_ASSERT_FILETYPE_INVALID config: config, expect: 'FIFO', stats: stats\\n    if fs.constants.S_IFLNK in config.filetype and not utils.stats.isSymbolicLink stats.mode\\n      throw errors.NIKITA_FS_ASSERT_FILETYPE_INVALID config: config, expect: 'Symbolic Link', stats: stats\\n    if fs.constants.S_IFSOCK in config.filetype and not utils.stats.isSocket stats.mode\\n      throw errors.NIKITA_FS_ASSERT_FILETYPE_INVALID config: config, expect: 'Socket', stats: stats\\n  # Assert content equal\\n  if config.content? and (typeof config.content is 'string' or Buffer.isBuffer config.content)\\n    {data} = await @fs.base.readFile config.target\\n    for filter in config.filter or []\\n      data = filter[Symbol.replace] data, ''\\n    # RegExp returns string\\n    if typeof data is 'string'\\n      data = Buffer.from data\\n    data = utils.buffer.trim data, config.encoding if config.trim\\n    unless config.not\\n      unless data.equals config.content\\n        throw errors.NIKITA_FS_ASSERT_CONTENT_UNEQUAL config: config, expect: data\\n    else\\n      if data.equals config.content\\n        throw errors.NIKITA_FS_ASSERT_CONTENT_EQUAL config: config, expect: data\\n    throw err if err\\n  # Assert content match\\n  if config.content? and config.content instanceof RegExp\\n    {data} = await @fs.base.readFile config.target\\n    for filter in config.filter or []\\n      data = filter[Symbol.replace] data, ''\\n    data = utils.buffer.trim data, config.encoding if config.trim\\n    unless config.not\\n      unless config.content.test data\\n        throw errors.NIKITA_FS_ASSERT_CONTENT_UNMATCH config: config, expect: data\\n    else\\n      if config.content.test data\\n        throw errors.NIKITA_FS_ASSERT_CONTENT_MATCH config: config, expect: data\\n    throw err if err\\n  # Assert hash match\\n  # todo, also support config.algo and config.hash\\n  (algo = 'md5'; _hash = config.md5) if config.md5\\n  (algo = 'sha1'; _hash = config.sha1) if config.sha1\\n  (algo = 'sha256'; _hash = config.sha256) if config.sha256\\n  if algo\\n    {hash} = await @fs.hash config.target, algo: algo\\n    unless config.not\\n      if _hash isnt hash\\n        throw errors.NIKITA_FS_ASSERT_HASH_UNMATCH config: config, algo: algo, hash:\\n          expected: _hash, actual: hash\\n    else\\n      if _hash is hash\\n        throw errors.NIKITA_FS_ASSERT_HASH_MATCH config: config, algo: algo, hash: hash\\n  # Assert uid ownerships\\n  if config.uid?\\n    {stats} = await @fs.base.lstat config.target\\n    unless config.not\\n      unless \\\"#{stats.uid}\\\" is \\\"#{config.uid}\\\"\\n        throw errors.NIKITA_FS_ASSERT_UID_UNMATCH config: config, actual: stats.uid\\n    else\\n      if \\\"#{stats.uid}\\\" is \\\"#{config.uid}\\\"\\n        throw errors.NIKITA_FS_ASSERT_UID_MATCH config: config\\n  # Assert gid ownerships\\n  if config.gid?\\n    {stats} = await @fs.base.stat config.target\\n    unless config.not\\n      unless \\\"#{stats.gid}\\\" is \\\"#{config.gid}\\\"\\n        throw errors.NIKITA_FS_ASSERT_GID_UNMATCH config: config, actual: stats.gid\\n    else\\n      if \\\"#{stats.gid}\\\" is \\\"#{config.gid}\\\"\\n        throw errors.NIKITA_FS_ASSERT_GID_MATCH config: config\\n  # Assert file permissions\\n  if config.mode?.length\\n    {stats} = await @fs.base.stat config.target\\n    unless config.not\\n      unless utils.mode.compare config.mode, stats.mode\\n        throw errors.NIKITA_FS_ASSERT_MODE_UNMATCH config: config, mode: stats.mode\\n    else\\n      if utils.mode.compare config.mode, stats.mode\\n        throw errors.NIKITA_FS_ASSERT_MODE_MATCH config: config\"))), mdx(\"h2\", {\n    \"id\": \"exports\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#exports\",\n    \"aria-label\": \"exports permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Exports\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"module.exports =\\n  handler: handler\\n  hooks:\\n    on_action: on_action\\n  metadata:\\n    argument_to_config: 'target'\\n    definitions: definitions\"))), mdx(\"h2\", {\n    \"id\": \"errors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#errors\",\n    \"aria-label\": \"errors permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Errors\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"errors =\\n  NIKITA_FS_ASSERT_FILE_MISSING: ({config}) ->\\n    utils.error 'NIKITA_FS_ASSERT_FILE_MISSING', [\\n      'file does not exists,'\\n      \\\"location is #{JSON.stringify config.target}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_FILE_EXISTS: ({config}) ->\\n    utils.error 'NIKITA_FS_ASSERT_FILE_EXISTS', [\\n      'file exists,'\\n      \\\"location is #{JSON.stringify config.target}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_FILETYPE_INVALID: ({config, expect, stats}) ->\\n    utils.error 'NIKITA_FS_ASSERT_FILETYPE_INVALID', [\\n      'filetype is invalid,'\\n      \\\"expect #{JSON.stringify expect} type,\\\"\\n      \\\"got #{JSON.stringify utils.stats.type stats.mode} type,\\\"\\n      \\\"location is #{JSON.stringify config.target}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_CONTENT_UNEQUAL: ({config, expect}) ->\\n    utils.error 'NIKITA_FS_ASSERT_CONTENT_UNEQUAL', [\\n      'content does not equal the expected value,'\\n      \\\"expect #{JSON.stringify expect.toString()}\\\"\\n      \\\"to equal #{JSON.stringify config.content.toString()},\\\"\\n      \\\"location is #{JSON.stringify config.target}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_CONTENT_EQUAL: ({config, expect}) ->\\n    utils.error 'NIKITA_FS_ASSERT_CONTENT_EQUAL', [\\n      'content is matching,'\\n      \\\"not expecting to equal #{JSON.stringify expect.toString()},\\\"\\n      \\\"location is #{JSON.stringify config.target}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_CONTENT_UNMATCH: ({config, expect}) ->\\n    utils.error 'NIKITA_FS_ASSERT_CONTENT_UNMATCH', [\\n      'content does not match the provided regexp,'\\n      \\\"expect #{JSON.stringify expect.toString()}\\\"\\n      \\\"to match #{config.content.toString()},\\\"\\n      \\\"location is #{JSON.stringify config.target}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_CONTENT_MATCH: ({config, expect}) ->\\n    utils.error 'NIKITA_FS_ASSERT_CONTENT_MATCH', [\\n      'content is matching the provided regexp,'\\n      \\\"got #{JSON.stringify expect.toString()}\\\"\\n      \\\"to match #{config.content.toString()},\\\"\\n      \\\"location is #{JSON.stringify config.target}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_HASH_UNMATCH: ({config, algo, hash}) ->\\n    utils.error 'NIKITA_FS_ASSERT_HASH_UNMATCH', [\\n      \\\"an invalid #{algo} signature was computed,\\\"\\n      \\\"expect #{JSON.stringify hash.expected},\\\"\\n      \\\"got #{JSON.stringify hash.actual}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_HASH_MATCH: ({config, algo, hash}) ->\\n    utils.error 'NIKITA_FS_ASSERT_HASH_MATCH', [\\n      \\\"the #{algo} signatures are matching,\\\"\\n      \\\"not expecting to equal #{JSON.stringify hash}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_MODE_UNMATCH: ({config, mode}) ->\\n    expect = config.mode.map (mode) -> \\\"#{pad 4, utils.mode.stringify(mode), '0'}\\\"\\n    utils.error \\\"NIKITA_FS_ASSERT_MODE_UNMATCH\\\", [\\n      'content permission don\\\\'t match the provided mode,'\\n      \\\"expect #{expect},\\\"\\n      \\\"got #{utils.mode.stringify(mode).substr -4}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_MODE_MATCH: ({config}) ->\\n    expect = config.mode.map (mode) -> \\\"#{pad 4, utils.mode.stringify(mode), '0'}\\\"\\n    utils.error \\\"NIKITA_FS_ASSERT_MODE_MATCH\\\", [\\n      'the content permission match the provided mode,'\\n      \\\"not expecting to equal #{expect}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_UID_UNMATCH: ({config, actual}) ->\\n    utils.error 'NIKITA_FS_ASSERT_UID_UNMATCH', [\\n      'the uid of the target does not match the expected value,'\\n      \\\"expected #{JSON.stringify config.uid},\\\"\\n      \\\"got #{JSON.stringify actual}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_UID_MATCH: ({config}) ->\\n    utils.error 'NIKITA_FS_ASSERT_UID_MATCH', [\\n      'the uid of the target  match the provided value,'\\n      \\\"not expecting to equal #{JSON.stringify config.uid}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_GID_UNMATCH: ({config, actual}) ->\\n    utils.error 'NIKITA_FS_ASSERT_GID_UNMATCH', [\\n      'the gid of the target does not match the expected value,'\\n      \\\"expected #{JSON.stringify config.uid},\\\"\\n      \\\"got #{JSON.stringify actual}.\\\"\\n    ], target: config.target, message: config.error\\n  NIKITA_FS_ASSERT_GID_MATCH: ({config}) ->\\n    utils.error 'NIKITA_FS_ASSERT_GID_MATCH', [\\n      'the gid of the target  match the provided value,'\\n      \\\"not expecting to equal #{JSON.stringify config.uid}.\\\"\\n    ], target: config.target, message: config.error\"))), mdx(\"h2\", {\n    \"id\": \"dependencies\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#dependencies\",\n    \"aria-label\": \"dependencies permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Dependencies\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"pad = require 'pad'\\nfs = require 'fs'\\nutils = require '../../utils'\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#nikitafsassert","title":"nikita.fs.assert","items":[{"url":"#output","title":"Output"},{"url":"#example","title":"Example"},{"url":"#hooks","title":"Hooks"},{"url":"#schema-definitions","title":"Schema definitions"},{"url":"#handler","title":"Handler"},{"url":"#exports","title":"Exports"},{"url":"#errors","title":"Errors"},{"url":"#dependencies","title":"Dependencies"}]}]},"excerpt":"nikita.fs.assert Assert a file exists or a provided text match the content of a text file. Output err  (Error) Error if assertion failed.    Example Validate the content of a file: Ensure a file does…"}}},"pageContext":{}},
    "staticQueryHashes": ["2288906906","393869461"]}